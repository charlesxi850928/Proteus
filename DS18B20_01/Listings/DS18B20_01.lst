C51 COMPILER V9.60.0.0   DS18B20_01                                                        04/15/2022 00:01:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DS18B20_01
OBJECT MODULE PLACED IN .\Objects\DS18B20_01.obj
COMPILER INVOKED BY: D:\Program\KEIL_MDK\C51\BIN\C51.EXE DS18B20_01.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\DS18B20_01.lst) TABS(2) OBJECT(.\Objects\DS18B20_01.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #define uint unsigned int
   4          #define uchar unsigned char
   5          #define delayNOP() {_nop_();_nop_();_nop_();_nop_();}
   6          
   7          sbit DQ = P3^3;
   8          sbit LCD_RS = P2^0;
   9          sbit LCD_RW = P2^1;
  10          sbit LCD_EN = P2^2;
  11          
  12          uchar code Temp_Disp_Title[]={"Current Temp:    "};
  13          uchar Current_Temp_Display_Buffer[]={"TEMP: "};
  14          
  15          uchar code Temperature_Char[8] = 
  16          {
  17            0x0c,0x12,0x12,0x0c,0x00,0x00,0x00,0x00
  18          };
  19          
  20          uchar code df_Table[]=
  21          {
  22            0,1,1,2,3,3,4,4,5,6,6,7,8,8,9,9
  23          };
  24          
  25          uchar CurrentT = 0;
  26          uchar Temp_Value[]={0x00,0x00};
  27          uchar Display_Digit[]={0,0,0,0};
  28          bit DS18B20_IS_OK = 1;
  29          
  30          void DelayXus(uint x)
  31          {
  32   1        uchar i;
  33   1        while(x--)
  34   1        {
  35   2          for(i=0;i<200;i++);
  36   2        }
  37   1      }
  38          
  39          bit LCD_Busy_Check()
  40          {
  41   1        bit result;
  42   1        LCD_RS = 0;
  43   1        LCD_RW = 1;
  44   1        LCD_EN = 1;
  45   1        delayNOP();
  46   1        result = (bit)(P0&0x80);
  47   1        LCD_EN=0;
  48   1        return result;
  49   1      }
  50          
  51          void Write_LCD_Command(uchar cmd)
  52          {
  53   1        while(LCD_Busy_Check());
  54   1        LCD_RS = 0;
C51 COMPILER V9.60.0.0   DS18B20_01                                                        04/15/2022 00:01:45 PAGE 2   

  55   1        LCD_RW = 0;
  56   1        LCD_EN = 0;
  57   1        _nop_();
  58   1        _nop_();
  59   1        P0 = cmd;
  60   1        delayNOP();
  61   1        LCD_EN = 1;
  62   1        delayNOP();
  63   1        LCD_EN = 0;
  64   1      }
  65          
  66          void Write_LCD_Data(uchar dat)
  67          {
  68   1        while(LCD_Busy_Check());
  69   1        LCD_RS = 1;
  70   1        LCD_RW = 0;
  71   1        LCD_EN = 0;
  72   1        P0 = dat;
  73   1        delayNOP();
  74   1        LCD_EN = 1;
  75   1        delayNOP();
  76   1        LCD_EN = 0;
  77   1      }
  78          
  79          void LCD_Initialise()
  80          {
  81   1        Write_LCD_Command(0x01);
  82   1        DelayXus(5);
  83   1        Write_LCD_Command(0x38);
  84   1        DelayXus(5);
  85   1        Write_LCD_Command(0x0c);
  86   1        DelayXus(5);
  87   1        Write_LCD_Command(0x06);
  88   1        DelayXus(5);  
  89   1      }
  90          
  91          void Set_LCD_POS(uchar pos)
  92          {
  93   1        Write_LCD_Command(pos|0x80);  
  94   1      }
  95          
  96          void Delay(uint x)
  97          {
  98   1        while(--x);
  99   1      }
 100          
 101          void Delay1ms(uint t)
 102          {
 103   1          unsigned char a,b;
 104   1        uint i;
 105   1        for(i=0;i<t;i++)
 106   1            for(b=199;b>0;b--)
 107   1                for(a=1;a>0;a--);
 108   1      }
 109          uchar Init_DS18B20()
 110          {
 111   1        uchar status;
 112   1        DQ = 1;
 113   1        Delay(8);
 114   1        DQ = 0;
 115   1        Delay(90);
 116   1        DQ = 1;
C51 COMPILER V9.60.0.0   DS18B20_01                                                        04/15/2022 00:01:45 PAGE 3   

 117   1        Delay(8);
 118   1        DQ = 1;
 119   1        return status;
 120   1      }
 121          
 122          uchar ReadOneByte()
 123          {
 124   1        uchar i,dat=0;
 125   1        DQ = 1;
 126   1        _nop_();
 127   1        for(i=0;i<8;i++)
 128   1        {
 129   2          DQ = 0;
 130   2          dat >>= 1;
 131   2          DQ = 1;
 132   2          _nop_();
 133   2          _nop_();
 134   2          if(DQ)
 135   2            dat |= 0x80;
 136   2          Delay(30);
 137   2          DQ = 1;
 138   2        }
 139   1        return dat;
 140   1      }
 141          
 142          void WriteOneByte(uchar dat)
 143          {
 144   1        uchar i;
 145   1        for(i=0;i<8;i++)
 146   1        {
 147   2          DQ = 0;
 148   2          DQ = dat& 0x01;
 149   2          Delay(5);
 150   2          DQ = 1;
 151   2          dat >>= 1;
 152   2        }
 153   1      }
 154          
 155          void Read_Temperature()
 156          {
 157   1        if(Init_DS18B20()==1)
 158   1          DS18B20_IS_OK=0;
 159   1        else
 160   1        {
 161   2          Init_DS18B20();
 162   2          Delay1ms(1);
 163   2          WriteOneByte(0xcc);
 164   2          WriteOneByte(0x44);
 165   2          Delay1ms(1);
 166   2      
 167   2          Init_DS18B20();
 168   2          Delay1ms(1);
 169   2          WriteOneByte(0xcc);
 170   2          WriteOneByte(0xbe);
 171   2          Delay1ms(1);
 172   2          Temp_Value[0] = ReadOneByte(); 
 173   2          Temp_Value[1] = ReadOneByte();
 174   2          DS18B20_IS_OK=1;  
 175   2        } 
 176   1      }
 177          
 178          void Display_Temperature()
C51 COMPILER V9.60.0.0   DS18B20_01                                                        04/15/2022 00:01:45 PAGE 4   

 179          {
 180   1        uchar i;
 181   1        uchar t = 150, ng = 0;
 182   1        if((Temp_Value[1]&0xf8)==0xf8)
 183   1        {
 184   2          Temp_Value[1] = ~Temp_Value[1];
 185   2          Temp_Value[0] = ~Temp_Value[0]+1;
 186   2          if(Temp_Value[0]==0x00)
 187   2            Temp_Value[1]++;
 188   2          ng = 1; 
 189   2        }
 190   1        Display_Digit[0] = df_Table[Temp_Value[0]&0x0f];
 191   1        CurrentT = ((Temp_Value[0]&0xf0)>>4) | ((Temp_Value[1]&0x07)<<4);
 192   1        Display_Digit[3] = CurrentT/100;
 193   1        Display_Digit[2] = CurrentT%100/10;
 194   1        Display_Digit[1] = CurrentT%10;
 195   1        Current_Temp_Display_Buffer[11] = Display_Digit[0] + '0';
 196   1        Current_Temp_Display_Buffer[10] = '.';
 197   1        Current_Temp_Display_Buffer[9]  = Display_Digit[1] + '0';
 198   1        Current_Temp_Display_Buffer[8]  = Display_Digit[2] + '0';
 199   1        Current_Temp_Display_Buffer[7]  = Display_Digit[3] + '0';
 200   1        if(Display_Digit[3] == 0)
 201   1          Current_Temp_Display_Buffer[7]  = ' ';
 202   1        if(Display_Digit[2] == 0&&Display_Digit[3]==0)
 203   1          Current_Temp_Display_Buffer[8]  = ' ';
 204   1        if(ng)
 205   1        {
 206   2          if(Current_Temp_Display_Buffer[8]  == ' ')
 207   2            Current_Temp_Display_Buffer[8]  = '-';
 208   2          else if(Current_Temp_Display_Buffer[7]  == ' ')
 209   2            Current_Temp_Display_Buffer[7]  = '-';
 210   2          else 
 211   2            Current_Temp_Display_Buffer[6]  = '-';
 212   2        }
 213   1        Set_LCD_POS(0x00);
 214   1        for(i=0;i<16;i++)
 215   1        {
 216   2          Write_LCD_Data(Temp_Disp_Title[i]);   
 217   2        }
 218   1        Set_LCD_POS(0x40);
 219   1        for(i=0;i<16;i++)
 220   1        {
 221   2          Write_LCD_Data(Current_Temp_Display_Buffer[i]);   
 222   2        }   
 223   1        Set_LCD_POS(0x4d);
 224   1        Write_LCD_Data(0x00);
 225   1        Set_LCD_POS(0x4e);
 226   1        Write_LCD_Data('C');
 227   1      }
 228          
 229          void main()
 230          {
 231   1        LCD_Initialise();
 232   1        Read_Temperature();
 233   1        Delay(50000);
 234   1        Delay(50000);
 235   1        while(1)
 236   1        {
 237   2          Read_Temperature();
 238   2          if(DS18B20_IS_OK) 
 239   2            Display_Temperature();
 240   2          DelayXus(100);    
C51 COMPILER V9.60.0.0   DS18B20_01                                                        04/15/2022 00:01:45 PAGE 5   

 241   2        }
 242   1      }
 243          
 244          
 245          
 246          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    652    ----
   CONSTANT SIZE    =     42    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
